{
  "_from": "moving-averages",
  "_id": "moving-averages@4.0.5",
  "_inBundle": false,
  "_integrity": "sha512-ofrBYz5tIiN3E24a9Q5evRprvb1AQLciE4fnblpv8P0zM/pwwEdGj7GgDQwSxyrAVNe3hfzn9IB5nXi0zt92AA==",
  "_location": "/moving-averages",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "moving-averages",
    "fetchSpec": "latest",
    "name": "moving-averages",
    "raw": "moving-averages",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moving-averages/-/moving-averages-4.0.5.tgz",
  "_shasum": "f1afea7eda8f956694a98857904cee780a4dc03d",
  "_shrinkwrap": null,
  "_spec": "moving-averages",
  "_where": "D:\\__binance-scout",
  "author": {
    "name": "kaelzhang"
  },
  "ava": {
    "babel": {
      "babelrc": true
    },
    "files": [
      "test/*.js"
    ],
    "require": "babel-register"
  },
  "bugs": {
    "url": "https://github.com/kaelzhang/moving-averages/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "The FinTech utility collections of simple, cumulative, and exponential moving averages.",
  "devDependencies": {
    "ava": "^0.16.0",
    "babel-cli": "^6.16.0",
    "babel-plugin-syntax-trailing-function-commas": "^6.13.0",
    "babel-plugin-transform-async-to-generator": "^6.22.0",
    "babel-plugin-transform-class-properties": "^6.16.0",
    "babel-plugin-transform-exponentiation-operator": "^6.8.0",
    "babel-plugin-transform-inline-environment-variables": "^6.8.0",
    "babel-plugin-transform-object-rest-spread": "^6.16.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-register": "^6.24.1",
    "codecov": "^2.3.0",
    "nyc": "^11.1.0",
    "rollup": "^0.49.3",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-node-resolve": "^3.0.0"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "lib/",
    "src/"
  ],
  "homepage": "https://github.com/kaelzhang/moving-averages#readme",
  "keywords": [
    "dma",
    "dynamic weighted moving average",
    "ema",
    "exponential moving average",
    "moving average",
    "moving-average",
    "moving-averages",
    "simple moving average",
    "sma",
    "sma",
    "smoothed moving average",
    "weighted moving average",
    "wma"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "module": "src/index.js",
  "name": "moving-averages",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/kaelzhang/moving-averages.svg?branch=master)](https://travis-ci.org/kaelzhang/moving-averages)\n[![Coverage](https://codecov.io/gh/kaelzhang/moving-averages/branch/master/graph/badge.svg)](https://codecov.io/gh/kaelzhang/moving-averages)\n<!-- optional npm version\n[![NPM version](https://badge.fury.io/js/moving-averages.svg)](http://badge.fury.io/js/moving-averages)\n-->\n<!-- optional npm downloads\n[![npm module downloads per month](http://img.shields.io/npm/dm/moving-averages.svg)](https://www.npmjs.org/package/moving-averages)\n-->\n<!-- optional dependency status\n[![Dependency Status](https://david-dm.org/kaelzhang/moving-averages.svg)](https://david-dm.org/kaelzhang/moving-averages)\n-->\n\n# moving-averages\n\nThe complete collection of [FinTech](https://en.wikipedia.org/wiki/Financial_technology) utility methods for [Moving average](https://en.wikipedia.org/wiki/Moving_average), including:\n\n- [simple moving average (MA)](#simple-moving-average-madata-size)\n- [dynamic weighted moving average (DMA)](#dynamic-weighted-moving-average-dmadata-alpha-nohead)\n- [exponential moving average (EMA)](#exponential-moving-average-emadata-size)\n- [smoothed moving average (SMA)](#smoothed-moving-average-smadata-size-times)\n- [weighted moving average (WMA)](#weighted-moving-average-wmadata-size)\n\nAnd `moving-averages` will also handle empty values.\n\n## install\n\n```sh\n$ npm i moving-averages\n```\n\n## usage\n\n```js\nimport {\n  ma, dma, ema, sma, wma\n} from 'moving-averages'\n\nma([1, 2, 3, 4, 5], 2)    \n// [<1 empty item>, 1.5, 2.5, 3.5, 4.5]\n```\n\n## Simple Moving Average: `ma(data, size)`\n\n- **data** `Array.<Number|undefined>` the collection of data inside which empty values are allowed. Empty values are useful if a stock is suspended.\n- **size** `Number` the size of the periods.\n\nReturns `Array.<Number|undefined>`\n\n#### Special Cases\n\n```js\n// If the size is less than `1`\nma([1, 2, 3], 0.5)       // [1, 2, 3]\n\n// If the size is larger than data length\nma([1, 2, 3], 5)         // [<3 empty items>]\n\nma([, 1,, 3, 4, 5], 2)   \n// [<2 empty items>, 0.5, 1.5, 3.5, 4.5]\n```\n\nAnd all of the other moving average methods have similar mechanism.\n\n## Dynamic Weighted Moving Average: `dma(data, alpha, noHead)`\n\n- **data**\n- **alpha** `Number|Array.<Number>` the coefficient or list of coefficients `alpha` represents the degree of weighting decrease for each datum.\n  - If `alpha` is a number, then the weighting decrease for each datum is the same.\n  - If `alpha` larger than `1` is invalid, then the return value will be an empty array of the same length of the original data.\n  - If `alpha` is an array, then it could provide different decreasing degree for each datum.\n- **noHead** `Boolean=` whether we should abandon the first DMA.\n\nReturns `Array.<Number|undefined>`\n\n```js\ndma([1, 2, 3], 2)    // [<3 empty items>]\n\ndma([1, 2, 3], 0.5)  // [1, 1.5, 2.25]\n\ndma([1, 2, 3, 4, 5], [0.1, 0.2, 0.1])  \n// [1, 1.2, 1.38]\n```\n\n## Exponential Moving Average: `ema(data, size)`\n\nCalulates the most frequent used exponential average which covers about 86% of the total weight (when `alpha = 2 / (N + 1)`).\n\n- **data**\n- **size** `Number` the size of the periods.\n\nReturns `Array.<Number|undefined>`\n\n## Smoothed Moving Average: `sma(data, size, times)`\n\nAlso known as the modified moving average or running moving average, with `alpha = times / size`.\n\n- **data**\n- **size**\n- **times** `Number=1`\n\nReturns `Array.<Number|undefined>`\n\n## Weighted Moving Average: `wma(data, size)`\n\nCalculates convolution of the datum points with a fixed weighting function.\n\nReturns `Array.<Number|undefined>`\n\n## Related FinTech Modules\n\n- [bollinger-bands](https://www.npmjs.com/package/bollinger-bands): Fintach math utility to calculate bollinger bands.\n- [s-deviation](https://www.npmjs.com/package/s-deviation): Math utility to calculate standard deviations.\n- [moving-averages](https://www.npmjs.com/package/moving-averages): The complete collection of utility methods for [Moving average](https://en.wikipedia.org/wiki/Moving_average).\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/kaelzhang/moving-averages.git"
  },
  "scripts": {
    "build": "BABEL_ENV=rollup rollup -c",
    "prepublish": "npm run build",
    "report-cov": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "test": "BABEL_ENV=ava nyc ava --verbose --timeout=10s"
  },
  "version": "4.0.5"
}
