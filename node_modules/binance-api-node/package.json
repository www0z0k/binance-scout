{
  "_from": "binance-api-node",
  "_id": "binance-api-node@0.9.17",
  "_inBundle": false,
  "_integrity": "sha512-JcXb9UbC8PgnmMQpSWz0y1a/b7er7Bl6G3zuZitFmzEYT3pQaaxrESGciRwwmZi0JtNOs12rxbz7AiJqHJQM+w==",
  "_location": "/binance-api-node",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "binance-api-node",
    "fetchSpec": "latest",
    "name": "binance-api-node",
    "raw": "binance-api-node",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/binance-api-node/-/binance-api-node-0.9.17.tgz",
  "_shasum": "6139f71275537e9718f816a07e65a68ecbaa832e",
  "_shrinkwrap": null,
  "_spec": "binance-api-node",
  "_where": "D:\\__binance-scout",
  "author": {
    "email": "bgronon@gmail.com",
    "name": "Balthazar Gronon"
  },
  "ava": {
    "files": [
      "!test/utils.js",
      "test/**/*"
    ],
    "require": [
      "@babel/polyfill",
      "@babel/register"
    ]
  },
  "bundleDependencies": false,
  "dependencies": {
    "isomorphic-fetch": "^2.2.1",
    "lodash.zipobject": "^4.1.3",
    "reconnecting-websocket": "^4.2.0",
    "ws": "^7.2.0"
  },
  "deprecated": false,
  "description": "A node API wrapper for Binance",
  "devDependencies": {
    "@babel/cli": "^7.7.4",
    "@babel/core": "^7.7.4",
    "@babel/polyfill": "^7.7.0",
    "@babel/preset-env": "^7.7.4",
    "@babel/register": "^7.7.4",
    "ava": "^2.4.0",
    "babel-eslint": "^10.0.3",
    "babel-plugin-module-resolver": "^3.2.0",
    "coveralls": "^3.0.9",
    "dotenv": "^8.2.0",
    "eslint": "^6.7.1",
    "eslint-config-prettier": "^6.7.0",
    "eslint-config-zavatta": "^6.0.3",
    "nyc": "^14.1.1",
    "prettier": "^1.19.1"
  },
  "engines": {
    "yarn": ">= 1.0.0"
  },
  "files": [
    "dist",
    "index.d.ts"
  ],
  "license": "MIT",
  "main": "dist",
  "name": "binance-api-node",
  "optionalDependencies": {},
  "readme": "# binance-api-node [![build](https://img.shields.io/travis/Ashlar/binance-api-node/master.svg?style=flat-square)](https://travis-ci.org/Ashlar/binance-api-node) [![cover](https://img.shields.io/coveralls/Ashlar/binance-api-node.svg?style=flat-square)](https://coveralls.io/github/Ashlar/binance-api-node) [![bnb](https://img.shields.io/badge/binance-winner-yellow.svg?style=flat-square)](https://github.com/binance-exchange/binance-api-node)\n\n> A complete API wrapper for the [Binance](https://binance.com) API.\n\nNote: This wrapper uses Promises, if they are not supported in your environment, you might\nwant to add [a polyfill](https://github.com/stefanpenner/es6-promise) for them.\n\nFor PRs or issues, head over to the [source repository](https://github.com/Ashlar/binance-api-node).\n\n### Installation\n\n    yarn add binance-api-node\n\n### Getting started\n\nImport the module and create a new client. Passing api keys is optional only if\nyou don't plan on doing authenticated calls. You can create an api key\n[here](https://www.binance.com/userCenter/createApi.html).\n\n```js\nimport Binance from 'binance-api-node'\n\nconst client = Binance()\n\n// Authenticated client, can make signed calls\nconst client2 = Binance({\n  apiKey: 'xxx',\n  apiSecret: 'xxx',\n  getTime: xxx, // time generator function, optional, defaults to () => Date.now()\n})\n\nclient.time().then(time => console.log(time))\n```\n\nIf you do not have an appropriate babel config, you will need to use the basic commonjs requires.\n\n```js\nconst Binance = require('binance-api-node').default\n```\n\nEvery REST method returns a Promise, making this library [async await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) ready.\nFollowing examples will use the `await` form, which requires some configuration you will have to lookup.\n\n### Table of Contents\n\n- [Public REST Endpoints](#public-rest-endpoints)\n  - [ping](#ping)\n  - [time](#time)\n  - [exchangeInfo](#exchangeinfo)\n  - [book](#book)\n  - [candles](#candles)\n  - [aggTrades](#aggtrades)\n  - [trades](#trades)\n  - [dailyStats](#dailystats)\n  - [avgPrice](#avgPrice)\n  - [prices](#prices)\n  - [allBookTickers](#allbooktickers)\n- [Futures Public REST Endpoints](#futures-public-rest-endpoints)\n  - [futures ping](#futures-ping)\n  - [futures time](#futures-time)\n  - [futures exchangeInfo](#futures-exchangeinfo)\n  - [futures book](#futures-book)\n  - [futures candles](#futures-candles)\n  - [futures aggTrades](#futures-aggtrades)\n  - [futures trades](#futures-trades)\n  - [futures dailyStats](#futures-dailystats)\n  - [futures avgPrice](#futures-avgPrice)\n  - [futures prices](#futures-prices)\n  - [futures allBookTickers](#futures-allbooktickers)\n  - [futures markPrice](#futures-markPrice)\n  - [futures allForceOrders](#futures-allForceOrders)\n- [Authenticated REST Endpoints](#authenticated-rest-endpoints)\n  - [order](#order)\n  - [orderTest](#ordertest)\n  - [orderOco](#orderoco)\n  - [getOrder](#getorder)\n  - [cancelOrder](#cancelorder)\n  - [openOrders](#openorders)\n  - [allOrders](#allorders)\n  - [accountInfo](#accountinfo)\n  - [myTrades](#mytrades)\n  - [tradesHistory](#tradeshistory)\n  - [depositHistory](#deposithistory)\n  - [withdrawHistory](#withdrawhistory)\n  - [withdraw](#withdraw)\n  - [depositAddress](#depositaddress)\n  - [tradeFee](#tradefee)\n- [Websockets](#websockets)\n  - [depth](#depth)\n  - [partialDepth](#partialdepth)\n  - [ticker](#ticker)\n  - [allTickers](#alltickers)\n  - [candles](#candles-1)\n  - [aggTrades](#aggtrades-1)\n  - [trades](#trades-1)\n  - [user](#user)\n- [ErrorCodes](#errorcodes)\n\n### Public REST Endpoints\n\n#### ping\n\nTest connectivity to the API.\n\n```js\nconsole.log(await client.ping())\n```\n\n#### time\n\nTest connectivity to the Rest API and get the current server time.\n\n```js\nconsole.log(await client.time())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n1508478457643\n```\n\n</details>\n\n#### exchangeInfo\n\nGet the current exchange trading rules and symbol information.\n\n```js\nconsole.log(await client.exchangeInfo())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"timezone\": \"UTC\",\n  \"serverTime\": 1508631584636,\n  \"rateLimits\": [\n    {\n      \"rateLimitType\": \"REQUEST_WEIGHT\",\n      \"interval\": \"MINUTE\",\n      \"intervalNum\": 1,\n      \"limit\": 1200\n    },\n    {\n      \"rateLimitType\": \"ORDERS\",\n      \"interval\": \"SECOND\",\n      \"intervalNum\": 1,\n      \"limit\": 10\n    },\n    {\n      \"rateLimitType\": \"ORDERS\",\n      \"interval\": \"DAY\",\n      \"intervalNum\": 1,\n      \"limit\": 100000\n    }\n  ],\n  \"exchangeFilters\": [],\n  \"symbols\": [{\n    \"symbol\": \"ETHBTC\",\n    \"status\": \"TRADING\",\n    \"baseAsset\": \"ETH\",\n    \"baseAssetPrecision\": 8,\n    \"quoteAsset\": \"BTC\",\n    \"quotePrecision\": 8,\n    \"orderTypes\": [\"LIMIT\", \"MARKET\"],\n    \"icebergAllowed\": false,\n    \"filters\": [{\n      \"filterType\": \"PRICE_FILTER\",\n      \"minPrice\": \"0.00000100\",\n      \"maxPrice\": \"100000.00000000\",\n      \"tickSize\": \"0.00000100\"\n    }, {\n      \"filterType\": \"LOT_SIZE\",\n      \"minQty\": \"0.00100000\",\n      \"maxQty\": \"100000.00000000\",\n      \"stepSize\": \"0.00100000\"\n    }, {\n      \"filterType\": \"MIN_NOTIONAL\",\n      \"minNotional\": \"0.00100000\"\n    }]\n  }]\n}\n```\n\n</details>\n\n#### book\n\nGet the order book for a symbol.\n\n```js\nconsole.log(await client.book({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required | Default |\n| ------ | ------ | -------- | ------- |\n| symbol | String | true     |\n| limit  | Number | false    | `100`   |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  lastUpdateId: 17647759,\n  asks:\n   [\n     { price: '0.05411500', quantity: '5.55000000' },\n     { price: '0.05416700', quantity: '11.80100000' }\n   ],\n  bids:\n   [\n     { price: '0.05395500', quantity: '2.70000000' },\n     { price: '0.05395100', quantity: '11.84100000' }\n   ]\n}\n```\n\n</details>\n\n#### candles\n\nRetrieves Candlestick for a symbol. Candlesticks are uniquely identified by their open time.\n\n```js\nconsole.log(await client.candles({ symbol: 'ETHBTC' }))\n```\n\n| Param     | Type   | Required | Default | Description                                                                                    |\n| --------- | ------ | -------- | ------- | ---------------------------------------------------------------------------------------------- |\n| symbol    | String | true     |\n| interval  | String | false    | `5m`    | `1m`, `3m`, `5m`, `15m`, `30m`, `1h`, `2h`,<br>`4h`, `6h`, `8h`, `12h`, `1d`, `3d`, `1w`, `1M` |\n| limit     | Number | false    | `500`   | Max `1000`                                                                                     |\n| startTime | Number | false    |\n| endTime   | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    openTime: 1508328900000,\n    open: '0.05655000',\n    high: '0.05656500',\n    low: '0.05613200',\n    close: '0.05632400',\n    volume: '68.88800000',\n    closeTime: 1508329199999,\n    quoteAssetVolume: '2.29500857',\n    trades: 85,\n    baseAssetVolume: '40.61900000',\n  },\n]\n```\n\n</details>\n\n#### aggTrades\n\nGet compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.\n\n```js\nconsole.log(await client.aggTrades({ symbol: 'ETHBTC' }))\n```\n\n| Param     | Type   | Required | Default | Description                                              |\n| --------- | ------ | -------- | ------- | -------------------------------------------------------- |\n| symbol    | String | true     |\n| fromId    | String | false    |         | ID to get aggregate trades from INCLUSIVE.               |\n| startTime | Number | false    |         | Timestamp in ms to get aggregate trades from INCLUSIVE.  |\n| endTime   | Number | false    |         | Timestamp in ms to get aggregate trades until INCLUSIVE. |\n| limit     | Number | false    | `500`   | Max `500`                                                |\n\nNote: If both `startTime` and `endTime` are sent, `limit` should not be sent AND the distance between `startTime` and `endTime` must be less than 24 hours.\n\nNote: If `frondId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    aggId: 2107132,\n    symbol: 'ETHBTC',\n    price: '0.05390400',\n    quantity: '1.31000000',\n    firstId: 2215345,\n    lastId: 2215345,\n    timestamp: 1508478599481,\n    isBuyerMaker: true,\n    wasBestPrice: true,\n  },\n]\n```\n\n</details>\n\n#### trades\n\nGet recent trades of a symbol.\n\n```js\nconsole.log(await client.trades({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required | Default | Description |\n| ------ | ------ | -------- | ------- | ----------- |\n| symbol | String | true     |\n| limit  | Number | false    | `500`   | Max `500`   |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    id: 28457,\n    price: '4.00000100',\n    qty: '12.00000000',\n    time: 1499865549590,\n    isBuyerMaker: true,\n    isBestMatch: true,\n  },\n]\n```\n\n</details>\n\n#### dailyStats\n\n24 hour price change statistics, not providing a symbol will return all tickers and is resource-expensive.\n\n```js\nconsole.log(await client.dailyStats({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required |\n| ------ | ------ | -------- |\n| symbol | String | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  symbol: 'ETHBTC',\n  priceChange: '-0.00112000',\n  priceChangePercent: '-1.751',\n  weightedAvgPrice: '0.06324784',\n  prevClosePrice: '0.06397400',\n  lastPrice: '0.06285500',\n  lastQty: '0.63500000',\n  bidPrice: '0.06285500',\n  bidQty: '0.81900000',\n  askPrice: '0.06291900',\n  askQty: '2.93800000',\n  openPrice: '0.06397500',\n  highPrice: '0.06419100',\n  lowPrice: '0.06205300',\n  volume: '126240.37200000',\n  quoteVolume: '7984.43091340',\n  openTime: 1521622289427,\n  closeTime: 1521708689427,\n  firstId: 45409308, // First tradeId\n  lastId: 45724293, // Last tradeId\n  count: 314986 // Trade count\n}\n```\n\n</details>\n\n#### avgPrice\n\nCurrent average price for a symbol.\n\n```js\nconsole.log(await client.avgPrice({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required |\n| ------ | ------ | -------- |\n| symbol | String | true     |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"mins\": 5,\n  \"price\": \"9.35751834\"\n}\n```\n\n</details>\n\n#### prices\n\nLatest price for all symbols.\n\n```js\nconsole.log(await client.prices())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  ETHBTC: '0.05392500',\n  LTCBTC: '0.01041100',\n  ...\n}\n```\n\n</details>\n\n#### allBookTickers\n\nBest price/qty on the order book for all symbols.\n\n```js\nconsole.log(await client.allBookTickers())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  DASHBTC: {\n    symbol: 'DASHBTC',\n    bidPrice: '0.04890400',\n    bidQty: '0.74100000',\n    askPrice: '0.05230000',\n    askQty: '0.79900000'\n  },\n  DASHETH: {\n    symbol: 'DASHETH',\n    bidPrice: '0.89582000',\n    bidQty: '0.63300000',\n    askPrice: '1.02328000',\n    askQty: '0.99900000'\n  }\n  ...\n}\n```\n\n</details>\n\n#### futures ping\n\nTest connectivity to the API.\n\n```js\nconsole.log(await client.futuresPing())\n```\n\n#### futures time\n\nTest connectivity to the Rest API and get the current server time.\n\n```js\nconsole.log(await client.futuresTime())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n1508478457643\n```\n\n</details>\n\n#### futures exchangeInfo\n\nGet the current exchange trading rules and symbol information.\n\n```js\nconsole.log(await client.futuresExchangeInfo())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"timezone\": \"UTC\",\n  \"serverTime\": 1508631584636,\n  \"rateLimits\": [\n    {\n      \"rateLimitType\": \"REQUEST_WEIGHT\",\n      \"interval\": \"MINUTE\",\n      \"intervalNum\": 1,\n      \"limit\": 1200\n    },\n    {\n      \"rateLimitType\": \"ORDERS\",\n      \"interval\": \"SECOND\",\n      \"intervalNum\": 1,\n      \"limit\": 10\n    },\n    {\n      \"rateLimitType\": \"ORDERS\",\n      \"interval\": \"DAY\",\n      \"intervalNum\": 1,\n      \"limit\": 100000\n    }\n  ],\n  \"exchangeFilters\": [],\n  \"symbols\": [...]\n}\n```\n\n</details>\n\n#### futures book\n\nGet the order book for a symbol.\n\n```js\nconsole.log(await client.futuresBook({ symbol: 'BTCUSDT' }))\n```\n\n| Param  | Type   | Required | Default |\n| ------ | ------ | -------- | ------- |\n| symbol | String | true     |\n| limit  | Number | false    | `100`   |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  lastUpdateId: 17647759,\n  asks:\n   [\n     { price: '8000.05411500', quantity: '54.55000000' },\n     { price: '8000.05416700', quantity: '1111.80100000' }\n   ],\n  bids:\n   [\n     { price: '8000.05395500', quantity: '223.70000000' },\n     { price: '8000.05395100', quantity: '1134.84100000' }\n   ]\n}\n```\n\n</details>\n\n#### futures candles\n\nRetrieves Candlestick for a symbol. Candlesticks are uniquely identified by their open time.\n\n```js\nconsole.log(await client.futuresCandles({ symbol: 'BTCUSDT' }))\n```\n\n| Param     | Type   | Required | Default | Description                                                                                    |\n| --------- | ------ | -------- | ------- | ---------------------------------------------------------------------------------------------- |\n| symbol    | String | true     |\n| interval  | String | false    | `5m`    | `1m`, `3m`, `5m`, `15m`, `30m`, `1h`, `2h`,<br>`4h`, `6h`, `8h`, `12h`, `1d`, `3d`, `1w`, `1M` |\n| limit     | Number | false    | `500`   | Max `1000`                                                                                     |\n| startTime | Number | false    |\n| endTime   | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    openTime: 1508328900000,\n    open: '0.05655000',\n    high: '0.05656500',\n    low: '0.05613200',\n    close: '0.05632400',\n    volume: '68.88800000',\n    closeTime: 1508329199999,\n    quoteAssetVolume: '2.29500857',\n    trades: 85,\n    baseAssetVolume: '40.61900000',\n  },\n]\n```\n\n</details>\n\n#### futures aggTrades\n\nGet compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.\n\n```js\nconsole.log(await client.futuresAggTrades({ symbol: 'ETHBTC' }))\n```\n\n| Param     | Type   | Required | Default | Description                                              |\n| --------- | ------ | -------- | ------- | -------------------------------------------------------- |\n| symbol    | String | true     |\n| fromId    | String | false    |         | ID to get aggregate trades from INCLUSIVE.               |\n| startTime | Number | false    |         | Timestamp in ms to get aggregate trades from INCLUSIVE.  |\n| endTime   | Number | false    |         | Timestamp in ms to get aggregate trades until INCLUSIVE. |\n| limit     | Number | false    | `500`   | Max `500`                                                |\n\nNote: If both `startTime` and `endTime` are sent, `limit` should not be sent AND the distance between `startTime` and `endTime` must be less than 24 hours.\n\nNote: If `frondId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    aggId: 2107132,\n    price: '0.05390400',\n    quantity: '1.31000000',\n    firstId: 2215345,\n    lastId: 2215345,\n    timestamp: 1508478599481,\n    isBuyerMaker: true,\n    wasBestPrice: true,\n  },\n]\n```\n\n</details>\n\n#### futures trades\n\nGet recent trades of a symbol.\n\n```js\nconsole.log(await client.futuresTrades({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required | Default | Description |\n| ------ | ------ | -------- | ------- | ----------- |\n| symbol | String | true     |\n| limit  | Number | false    | `500`   | Max `500`   |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    id: 28457,\n    price: '4.00000100',\n    qty: '12.00000000',\n    time: 1499865549590,\n    isBuyerMaker: true,\n    isBestMatch: true,\n  },\n]\n```\n\n</details>\n\n#### futures dailyStats\n\n24 hour price change statistics, not providing a symbol will return all tickers and is resource-expensive.\n\n```js\nconsole.log(await client.futuresDailyStats({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required |\n| ------ | ------ | -------- |\n| symbol | String | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  symbol: 'BTCUSDT',\n  priceChange: '-0.00112000',\n  priceChangePercent: '-1.751',\n  weightedAvgPrice: '0.06324784',\n  prevClosePrice: '0.06397400',\n  lastPrice: '0.06285500',\n  lastQty: '0.63500000',\n  bidPrice: '0.06285500',\n  bidQty: '0.81900000',\n  askPrice: '0.06291900',\n  askQty: '2.93800000',\n  openPrice: '0.06397500',\n  highPrice: '0.06419100',\n  lowPrice: '0.06205300',\n  volume: '126240.37200000',\n  quoteVolume: '7984.43091340',\n  openTime: 1521622289427,\n  closeTime: 1521708689427,\n  firstId: 45409308, // First tradeId\n  lastId: 45724293, // Last tradeId\n  count: 314986 // Trade count\n}\n```\n\n</details>\n\n#### futures avgPrice\n\nCurrent average price for a symbol.\n\n```js\nconsole.log(await client.futuresAvgPrice({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required |\n| ------ | ------ | -------- |\n| symbol | String | true     |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"mins\": 5,\n  \"price\": \"9.35751834\"\n}\n```\n\n</details>\n\n#### futures prices\n\nLatest price for all symbols.\n\n```js\nconsole.log(await client.futuresPrices())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  BTCUSDT: '8590.05392500',\n  ETHUSDT: '154.1100',\n  ...\n}\n```\n\n</details>\n\n#### futures allBookTickers\n\nBest price/qty on the order book for all symbols.\n\n```js\nconsole.log(await client.futuresAllBookTickers())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  BTCUSDT: {\n    symbol: 'BTCUSDT',\n    bidPrice: '0.04890400',\n    bidQty: '0.74100000',\n    askPrice: '0.05230000',\n    askQty: '0.79900000'\n  },\n  ETHUSDT: {\n    symbol: 'ETHUSDT',\n    bidPrice: '0.89582000',\n    bidQty: '0.63300000',\n    askPrice: '1.02328000',\n    askQty: '0.99900000'\n  }\n  ...\n}\n```\n\n</details>\n\n#### futures markPrice\n\nMark Price and Funding Rate.\n\n```js\nconsole.log(await client.futuresMarkPrice())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n    \"symbol\": \"BTCUSDT\",\n    \"markPrice\": \"11012.80409769\",\n    \"lastFundingRate\": \"-0.03750000\",\n    \"nextFundingTime\": 1562569200000,\n    \"time\": 1562566020000\n}\n```\n\n</details>\n\n#### futures AllForceOrders\n\nGet all Liquidation Orders.\n\n```js\nconsole.log(await client.futuresAllForceOrders())\n```\n\n| Param     | Type   | Required |\n| --------- | ------ | -------- |\n| symbol    | String | false    |\n| startTime | Long   | false    |\n| endTime   | Long   | false    |\n| limit     | Long   | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    symbol: 'BTCUSDT', // SYMBOL\n    price: '7918.33', // ORDER_PRICE\n    origQty: '0.014', // ORDER_AMOUNT\n    executedQty: '0.014', // FILLED_AMOUNT\n    avragePrice: '7918.33', // AVG_PRICE\n    status: 'FILLED', // STATUS\n    timeInForce: 'IOC', // TIME_IN_FORCE\n    type: 'LIMIT',\n    side: 'SELL', // DIRECTION\n    time: 1568014460893,\n  },\n]\n```\n\n</details>\n\n### Authenticated REST Endpoints\n\nNote that for all authenticated endpoints, you can pass an extra parameter\n`useServerTime` set to `true` in order to fetch the server time before making\nthe request.\n\n#### order\n\nCreates a new order.\n\n```js\nconsole.log(\n  await client.order({\n    symbol: 'XLMETH',\n    side: 'BUY',\n    quantity: 100,\n    price: 0.0002,\n  }),\n)\n```\n\n| Param            | Type   | Required | Default  | Description                                                         |\n| ---------------- | ------ | -------- | -------- | ------------------------------------------------------------------- |\n| symbol           | String | true     |\n| side             | String | true     |          | `BUY`,`SELL`                                                        |\n| type             | String | false    | `LIMIT`  | `LIMIT`, `MARKET`                                                   |\n| quantity         | Number | true     |\n| price            | Number | true     |          | Optional for `MARKET` orders                                        |\n| timeInForce      | String | false    | `GTC`    | `FOK`, `GTC`, `IOC`                                                 |\n| newClientOrderId | String | false    |          | A unique id for the order. Automatically generated if not sent.     |\n| stopPrice        | Number | false    |          | Used with stop orders                                               |\n| newOrderRespType | String | false    | `RESULT` | Returns more complete info of the order. `ACK`, `RESULT`, or `FULL` |\n| icebergQty       | Number | false    |          | Used with iceberg orders                                            |\n| recvWindow       | Number | false    |\n\nAdditional mandatory parameters based on `type`:\n\n| Type                | Additional mandatory parameters                 |\n| ------------------- | ----------------------------------------------- |\n| `LIMIT`             | `timeInForce`, `quantity`, `price`              |\n| `MARKET`            | `quantity`                                      |\n| `STOP_LOSS`         | `quantity`, `stopPrice`                         |\n| `STOP_LOSS_LIMIT`   | `timeInForce`, `quantity`, `price`, `stopPrice` |\n| `TAKE_PROFIT`       | `quantity`, `stopPrice`                         |\n| `TAKE_PROFIT_LIMIT` | `timeInForce`, `quantity`, `price`, `stopPrice` |\n| `LIMIT_MAKER`       | `quantity`, `price`                             |\n\n- `LIMIT_MAKER` are `LIMIT` orders that will be rejected if they would immediately match and trade as a taker.\n- `STOP_LOSS` and `TAKE_PROFIT` will execute a `MARKET` order when the `stopPrice` is reached.\n- Any `LIMIT` or `LIMIT_MAKER` type order can be made an iceberg order by sending an `icebergQty`.\n- Any order with an `icebergQty` MUST have `timeInForce` set to `GTC`.\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  symbol: 'XLMETH',\n  orderId: 1740797,\n  clientOrderId: '1XZTVBTGS4K1e',\n  transactTime: 1514418413947,\n  price: '0.00020000',\n  origQty: '100.00000000',\n  executedQty: '0.00000000',\n  status: 'NEW',\n  timeInForce: 'GTC',\n  type: 'LIMIT',\n  side: 'BUY'\n}\n```\n\n</details>\n\n#### orderTest\n\nTest new order creation and signature/recvWindow. Creates and validates a new order but does not send it into the matching engine.\n\nSame API as above, but does not return any output on success.\n\n#### orderOco\n\nCreates a new OCO order.\n\n```js\nconsole.log(\n  await client.orderOco({\n    symbol: 'XLMETH',\n    side: 'SELL',\n    quantity: 100,\n    price: 0.0002,\n    stopPrice: 0.0001,\n    stopLimitPrice: 0.0001,\n  }),\n)\n```\n\n| Param                | Type   | Required | Description\n|----------------------|--------|----------|------------\n| symbol               | String | true     |\n| listClientOrderId    | String | false    | A unique Id for the entire orderList\n| side                 | String | true     | `BUY`,`SELL`\n| quantity             | Number | true     |\n| limitClientOrderId   | String | false    | A unique Id for the limit order\n| price                | Number | true     |\n| limitIcebergQty      | Number | false    | Used to make the `LIMIT_MAKER` leg an iceberg order.\n| stopClientOrderId    | String | false    | A unique Id for the stop loss/stop loss limit leg\n| stopPrice            | Number | true\n| stopLimitPrice       | Number | false    | If provided, `stopLimitTimeInForce` is required.\n| stopIcebergQty       | Number | false    | Used with `STOP_LOSS_LIMIT` leg to make an iceberg order.\n| stopLimitTimeInForce | String | false    | `FOK`, `GTC`, `IOC`\n| newOrderRespType     | String | false    | Returns more complete info of the order. `ACK`, `RESULT`, or `FULL`\n| recvWindow           | Number | false    | The value cannot be greater than `60000`\n\nAdditional Info:\n- Price Restrictions:\n    - `SELL`: Limit Price > Last Price > Stop Price\n    - `BUY`: Limit Price < Last Price < Stop Price\n- Quantity Restrictions:\n    - Both legs must have the same quantity.\n    - ```ICEBERG``` quantities however do not have to be the same\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"orderListId\": 0,\n  \"contingencyType\": \"OCO\",\n  \"listStatusType\": \"EXEC_STARTED\",\n  \"listOrderStatus\": \"EXECUTING\",\n  \"listClientOrderId\": \"JYVpp3F0f5CAG15DhtrqLp\",\n  \"transactionTime\": 1514418413947,\n  \"symbol\": \"XLMETH\",\n  \"orders\": [\n    {\n      \"symbol\": \"XLMETH\",\n      \"orderId\": 1740797,\n      \"clientOrderId\": \"1XZTVBTGS4K1e\"\n    },\n    {\n      \"symbol\": \"XLMETH\",\n      \"orderId\": 1740798,\n      \"clientOrderId\": \"1XZTVBTGS4K1f\"\n    }\n  ],\n  \"orderReports\": [\n    {\n      \"symbol\": \"XLMETH\",\n      \"orderId\": 1740797,\n      \"orderListId\": 0,\n      \"clientOrderId\": \"1XZTVBTGS4K1e\",\n      \"transactTime\": 1514418413947,\n      \"price\": \"0.000000\",\n      \"origQty\": \"100\",\n      \"executedQty\": \"0.000000\",\n      \"cummulativeQuoteQty\": \"0.000000\",\n      \"status\": \"NEW\",\n      \"timeInForce\": \"GTC\",\n      \"type\": \"STOP_LOSS\",\n      \"side\": \"SELL\",\n      \"stopPrice\": \"0.0001\"\n    },\n    {\n      \"symbol\": \"XLMETH\",\n      \"orderId\": 1740798,\n      \"orderListId\": 0,\n      \"clientOrderId\": \"1XZTVBTGS4K1f\",\n      \"transactTime\": 1514418413947,\n      \"price\": \"0.0002\",\n      \"origQty\": \"100\",\n      \"executedQty\": \"0.000000\",\n      \"cummulativeQuoteQty\": \"0.000000\",\n      \"status\": \"NEW\",\n      \"timeInForce\": \"GTC\",\n      \"type\": \"LIMIT_MAKER\",\n      \"side\": \"SELL\"\n    }\n  ]\n}\n```\n\n</details>\n\n#### getOrder\n\nCheck an order's status.\n\n```js\nconsole.log(\n  await client.getOrder({\n    symbol: 'BNBETH',\n    orderId: 50167927,\n  }),\n)\n```\n\n| Param             | Type   | Required | Description                                 |\n| ----------------- | ------ | -------- | ------------------------------------------- |\n| symbol            | String | true     |\n| orderId           | Number | true     | Not required if `origClientOrderId` is used |\n| origClientOrderId | String | false    |\n| recvWindow        | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  clientOrderId: 'NkQnNkdBV1RGjUALLhAzNy',\n  cummulativeQuoteQty: '0.16961580',\n  executedQty: '3.91000000',\n  icebergQty: '0.00000000',\n  isWorking: true,\n  orderId: 50167927,\n  origQty: '3.91000000',\n  price: '0.04338000',\n  side: 'SELL',\n  status: 'FILLED',\n  stopPrice: '0.00000000',\n  symbol: 'BNBETH',\n  time: 1547075007821,\n  timeInForce: 'GTC',\n  type: 'LIMIT',\n  updateTime: 1547075016737\n}\n\n```\n\n</details>\n\n#### cancelOrder\n\nCancels an active order.\n\n```js\nconsole.log(\n  await client.cancelOrder({\n    symbol: 'ETHBTC',\n    orderId: 1,\n  }),\n)\n```\n\n| Param             | Type   | Required | Description                                                                |\n| ----------------- | ------ | -------- | -------------------------------------------------------------------------- |\n| symbol            | String | true     |\n| orderId           | Number | true     | Not required if `origClientOrderId` is used                                |\n| origClientOrderId | String | false    |\n| newClientOrderId  | String | false    | Used to uniquely identify this cancel. Automatically generated by default. |\n| recvWindow        | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  symbol: 'ETHBTC',\n  origClientOrderId: 'bnAoRHgI18gRD80FJmsfNP',\n  orderId: 1,\n  clientOrderId: 'RViSsQPTp1v3WmLYpeKT11'\n}\n```\n\n</details>\n\n#### openOrders\n\nGet all open orders on a symbol.\n\n```js\nconsole.log(\n  await client.openOrders({\n    symbol: 'XLMBTC',\n  }),\n)\n```\n\n| Param      | Type   | Required |\n| ---------- | ------ | -------- |\n| symbol     | String | true     |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    symbol: 'XLMBTC',\n    orderId: 11271740,\n    clientOrderId: 'ekHkROfW98gBN80LTfufQZ',\n    price: '0.00001081',\n    origQty: '1331.00000000',\n    executedQty: '0.00000000',\n    status: 'NEW',\n    timeInForce: 'GTC',\n    type: 'LIMIT',\n    side: 'BUY',\n    stopPrice: '0.00000000',\n    icebergQty: '0.00000000',\n    time: 1522682290485,\n    isWorking: true,\n  },\n]\n```\n\n</details>\n\n#### allOrders\n\nGet all account orders on a symbol; active, canceled, or filled.\n\n```js\nconsole.log(\n  await client.allOrders({\n    symbol: 'ETHBTC',\n  }),\n)\n```\n\n| Param      | Type   | Required | Default | Description                                                                            |\n| ---------- | ------ | -------- | ------- | -------------------------------------------------------------------------------------- |\n| symbol     | String | true     |\n| orderId    | Number | false    |         | If set, it will get orders >= that orderId. Otherwise most recent orders are returned. |\n| limit      | Number | false    | `500`   | Max `500`                                                                              |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    symbol: 'ENGETH',\n    orderId: 191938,\n    clientOrderId: '1XZTVBTGS4K1e',\n    price: '0.00138000',\n    origQty: '1.00000000',\n    executedQty: '1.00000000',\n    status: 'FILLED',\n    timeInForce: 'GTC',\n    type: 'LIMIT',\n    side: 'SELL',\n    stopPrice: '0.00000000',\n    icebergQty: '0.00000000',\n    time: 1508611114735,\n    isWorking: true,\n  },\n]\n```\n\n</details>\n\n#### accountInfo\n\nGet current account information.\n\n```js\nconsole.log(await client.accountInfo())\n```\n\n| Param      | Type   | Required |\n| ---------- | ------ | -------- |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  makerCommission: 10,\n  takerCommission: 10,\n  buyerCommission: 0,\n  sellerCommission: 0,\n  canTrade: true,\n  canWithdraw: true,\n  canDeposit: true,\n  balances: [\n    { asset: 'BTC', free: '0.00000000', locked: '0.00000000' },\n    { asset: 'LTC', free: '0.00000000', locked: '0.00000000' },\n  ]\n}\n```\n\n</details>\n\n#### myTrades\n\nGet trades for the current authenticated account and symbol.\n\n```js\nconsole.log(\n  await client.myTrades({\n    symbol: 'ETHBTC',\n  }),\n)\n```\n\n| Param      | Type   | Required | Default | Description                                             |\n| ---------- | ------ | -------- | ------- | ------------------------------------------------------- |\n| symbol     | String | true     |\n| limit      | Number | false    | `500`   | Max `500`                                               |\n| fromId     | Number | false    |         | TradeId to fetch from. Default gets most recent trades. |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    id: 9960,\n    orderId: 191939,\n    price: '0.00138000',\n    qty: '10.00000000',\n    commission: '0.00001380',\n    commissionAsset: 'ETH',\n    time: 1508611114735,\n    isBuyer: false,\n    isMaker: false,\n    isBestMatch: true,\n  },\n]\n```\n\n</details>\n\n#### tradesHistory\n\nLookup symbol trades history.\n\n```js\nconsole.log(await client.tradesHistory({ symbol: 'ETHBTC' }))\n```\n\n| Param  | Type   | Required | Default | Description                                             |\n| ------ | ------ | -------- | ------- | ------------------------------------------------------- |\n| symbol | String | true     |\n| limit  | Number | false    | `500`   | Max `500`                                               |\n| fromId | Number | false    | `null`  | TradeId to fetch from. Default gets most recent trades. |\n\n<details>\n<summary>Output</summary>\n\n```js\n;[\n  {\n    id: 28457,\n    price: '4.00000100',\n    qty: '12.00000000',\n    time: 1499865549590,\n    isBuyerMaker: true,\n    isBestMatch: true,\n  },\n]\n```\n\n</details>\n\n#### depositHistory\n\nGet the account deposit history.\n\n```js\nconsole.log(await client.depositHistory())\n```\n\n| Param      | Type   | Required | Description                |\n| ---------- | ------ | -------- | -------------------------- |\n| asset      | String | false    |\n| status     | Number | false    | 0 (0: pending, 1: success) |\n| startTime  | Number | false    |\n| endTime    | Number | false    |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"depositList\": [\n    {\n      \"insertTime\": 1508198532000,\n      \"amount\": 0.04670582,\n      \"asset\": \"ETH\",\n      \"status\": 1\n    }\n  ],\n  \"success\": true\n}\n```\n\n</details>\n\n#### withdrawHistory\n\nGet the account withdraw history.\n\n```js\nconsole.log(await client.withdrawHistory())\n```\n\n| Param      | Type   | Required | Description                                                                                                |\n| ---------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------- |\n| asset      | String | false    |\n| status     | Number | false    | 0 (0: Email Sent, 1: Cancelled 2: Awaiting Approval, 3: Rejected, 4: Processing, 5: Failure, 6: Completed) |\n| startTime  | Number | false    |\n| endTime    | Number | false    |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"withdrawList\": [\n    {\n      \"amount\": 1,\n      \"address\": \"0x6915f16f8791d0a1cc2bf47c13a6b2a92000504b\",\n      \"asset\": \"ETH\",\n      \"applyTime\": 1508198532000,\n      \"status\": 4\n    },\n  ],\n  \"success\": true\n}\n```\n\n</details>\n\n#### withdraw\n\nTriggers the withdraw process (_untested for now_).\n\n```js\nconsole.log(\n  await client.withdraw({\n    asset: 'ETH',\n    address: '0xfa97c22a03d8522988c709c24283c0918a59c795',\n    amount: 100,\n  }),\n)\n```\n\n| Param      | Type   | Required | Description                |\n| ---------- | ------ | -------- | -------------------------- |\n| asset      | String | true     |\n| address    | String | true     |\n| amount     | Number | true     |\n| name       | String | false    | Description of the address |\n| recvWindow | Number | false    |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  \"msg\": \"success\",\n  \"success\": true\n}\n```\n\n</details>\n\n#### depositAddress\n\nRetrieve the account deposit address for a specific asset.\n\n```js\nconsole.log(await client.depositAddress({ asset: 'NEO' }))\n```\n\n| Param | Type   | Required | Description    |\n| ----- | ------ | -------- | -------------- |\n| asset | String | true     | The asset name |\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  address: 'AM6ytPW78KYxQCmU2pHYGcee7GypZ7Yhhc',\n  addressTag: '',\n  asset: 'NEO',\n  success: true,\n}\n```\n\n</details>\n\n#### tradeFee\n\nRetrieve the account trade Fee per asset.\n\n```js\nconsole.log(await client.tradeFee())\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  tradeFee: [{\n    symbol: 'BTC',\n    maker: 0.0001,\n    taker: 0.0001,\n  },\n  {\n    symbol: 'LTC',\n    maker: 0.0001,\n    taker: 0.0001,\n  }\n  ...],\n  success: true,\n}\n\n```\n\n</details>\n\n### WebSockets\n\nEvery websocket utility returns a function you can call to close the opened\nconnection and avoid memory issues.\n\n```js\nconst clean = client.ws.depth('ETHBTC', depth => {\n  console.log(depth)\n})\n\n// After you're done\nclean()\n```\n\n#### depth\n\nLive depth market data feed. The first parameter can either\nbe a single symbol string or an array of symbols.\n\n```js\nclient.ws.depth('ETHBTC', depth => {\n  console.log(depth)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: 'depthUpdate',\n  eventTime: 1508612956950,\n  symbol: 'ETHBTC',\n  firstUpdateId: 18331140,\n  finalUpdateId: 18331145,\n  bidDepth: [\n    { price: '0.04896500', quantity: '0.00000000' },\n    { price: '0.04891100', quantity: '15.00000000' },\n    { price: '0.04891000', quantity: '0.00000000' } ],\n  askDepth: [\n    { price: '0.04910600', quantity: '0.00000000' },\n    { price: '0.04910700', quantity: '11.24900000' }\n  ]\n}\n```\n\n</details>\n\n#### partialDepth\n\nTop levels bids and asks, pushed every second. Valid levels are 5, 10, or 20.\nAccepts an array of objects for multiple depths.\n\n```js\nclient.ws.partialDepth({ symbol: 'ETHBTC', level: 10 }, depth => {\n  console.log(depth)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  symbol: 'ETHBTC',\n  level: 10,\n  bids: [\n    { price: '0.04896500', quantity: '0.00000000' },\n    { price: '0.04891100', quantity: '15.00000000' },\n    { price: '0.04891000', quantity: '0.00000000' }\n  ],\n  asks: [\n    { price: '0.04910600', quantity: '0.00000000' },\n    { price: '0.04910700', quantity: '11.24900000' }\n  ]\n}\n```\n\n</details>\n\n#### ticker\n\n24hr Ticker statistics for a symbol pushed every second. Accepts an array of symbols.\n\n```js\nclient.ws.ticker('HSRETH', ticker => {\n  console.log(ticker)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: '24hrTicker',\n  eventTime: 1514670820924,\n  symbol: 'HSRETH',\n  priceChange: '-0.00409700',\n  priceChangePercent: '-11.307',\n  weightedAvg: '0.03394946',\n  prevDayClose: '0.03623500',\n  curDayClose: '0.03213800',\n  closeTradeQuantity: '7.02000000',\n  bestBid: '0.03204200',\n  bestBidQnt: '78.00000000',\n  bestAsk: '0.03239800',\n  bestAskQnt: '7.00000000',\n  open: '0.03623500',\n  high: '0.03659900',\n  low: '0.03126000',\n  volume: '100605.15000000',\n  volumeQuote: '3415.49097353',\n  openTime: 1514584420922,\n  closeTime: 1514670820922,\n  firstTradeId: 344803,\n  lastTradeId: 351380,\n  totalTrades: 6578\n}\n```\n\n</details>\n\n#### allTickers\n\nRetrieves all the tickers.\n\n```js\nclient.ws.allTickers(tickers => {\n  console.log(tickers)\n})\n```\n\n#### candles\n\nLive candle data feed for a given interval. You can pass either a symbol string\nor a symbol array.\n\n```js\nclient.ws.candles('ETHBTC', '1m', candle => {\n  console.log(candle)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: 'kline',\n  eventTime: 1508613366276,\n  symbol: 'ETHBTC',\n  open: '0.04898000',\n  high: '0.04902700',\n  low: '0.04898000',\n  close: '0.04901900',\n  volume: '37.89600000',\n  trades: 30,\n  interval: '5m',\n  isFinal: false,\n  quoteVolume: '1.85728874',\n  buyVolume: '21.79900000',\n  quoteBuyVolume: '1.06838790'\n}\n```\n\n</details>\n\n#### trades\n\nLive trade data feed. Pass either a single symbol string or an array of symbols. The trade streams push raw trade information; each trade has a unique buyer and seller.\n\n```js\nclient.ws.trades(['ETHBTC', 'BNBBTC'], trade => {\n  console.log(trade)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: 'trade',\n  eventTime: 1508614495052,\n  tradeTime: 1508614495050,\n  symbol: 'ETHBTC',\n  price: '0.04923600',\n  quantity: '3.43500000',\n  isBuyerMaker: true,\n  maker: true,\n  tradeId: 2148226,\n  buyerOrderId: 390876,\n  sellerOrderId: 390752\n}\n```\n\n</details>\n\n#### aggTrades\n\nLive trade data feed. Pass either a single symbol string or an array of symbols. The aggregate trade streams push trade information that is aggregated for a single taker order.\n\n```js\nclient.ws.aggTrades(['ETHBTC', 'BNBBTC'], trade => {\n  console.log(trade)\n})\n```\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: 'aggTrade',\n  eventTime: 1508614495052,\n  aggId: 2148226,\n  price: '0.04923600',\n  quantity: '3.43500000',\n  firstId: 37856,\n  lastId: 37904,\n  timestamp: 1508614495050,\n  symbol: 'ETHBTC',\n  isBuyerMaker: false,\n  wasBestPrice: true\n}\n```\n\n</details>\n\n#### user\n\nLive user messages data feed.\n\n**Requires authentication**\n\n```js\nconst clean = await client.ws.user(msg => {\n  console.log(msg)\n})\n```\n\nLive user messages data feed on margin wallet.\n\n**Requires authentication**\n\n```js\nconst clean = await client.ws.marginUser(msg => {\n  console.log(msg)\n})\n```\n\nNote that this methods returns a promise which will resolve the `clean` callback.\n\n<details>\n<summary>Output</summary>\n\n```js\n{\n  eventType: 'account',\n  eventTime: 1508614885818,\n  balances: {\n    '123': { available: '0.00000000', locked: '0.00000000' },\n    '456': { available: '0.00000000', locked: '0.00000000' },\n    BTC: { available: '0.00000000', locked: '0.00000000' },\n  }\n}\n```\n\n</details>\n\n### ErrorCodes\n\nAn utility error code map is also being exported by the package in order for you to make readable\nconditionals upon specific errors that could occur while using the API.\n\n```js\nimport Binance, { ErrorCodes } from 'binance-api-node'\n\nconsole.log(ErrorCodes.INVALID_ORDER_TYPE) // -1116\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "rm -rf dist && babel src -d dist",
    "cover": "nyc ava",
    "lint": "eslint src",
    "prepare": "yarn build",
    "report": "yarn cover && nyc report --reporter=text-lcov | coveralls",
    "test": "ava --timeout=10s -v"
  },
  "version": "0.9.17"
}
